continue
arr.insert(2,1)
arr.insetr(2,1)
arr.inser(2,1)
arr = []
last_pointer
front_pointer
front_pointer > last_pointer
step
last_pointer
front_pointer
next
nex
array
exit
hash
hash.clear
hash
hash.delete(0)
hash.delete
hash
hasg
hash.delete(4)
hash
next
hash.keys.first
abs_diff
next
sum == target
sum
target
next
sum
next
start_index
next
abs_diff
next
hash
next
sum
next
last_index
start_index
hash
next
nex
next
continue
index
next
continue
dp[inner_index-1]
max_subsequence_length
dp
next
index
next
dp
next
temp_length
next
array
element
index
exit
continue
next
index
next
element
index
exit
root
max_level
current_level
continue
exit
max_level
mac_level
current_level
next
root
max_level
current_level
next
exit
continue
max_level
current_level
next
max_level
current_level
root.right
exit
continue
continie
next
root.nil?
=> 62:   return if root.nil?
exit
continue
exit
continue
current_element
next
current_element
inner_index
next
inner_index
continue
exit
@permutations
@perutations
continue
inner_index
next
inner_index
start_index
continue
inner_index
next
inner_index
start_index
continue
next
inner_index
start_index
exit
inner_index
next
inner_index
next
inner_index
next
inner_index
next
inner_index
next
inner_index
next
inner_index
exit
next
 array2[j]
array1[i]
next
 array2[j]
array1[i]
i
continue
exit
continue
max_length
next
width
max_length
table[inner_index]
next
inner_index + width
inner_inex + width
table[inner_index]
inner_index
index
width
exit
table[7][8]
string.size
table.size
continue
table
matrix
continue
string.chars
continue
table
exit
 table[index] == table[index + 1]
index
next
table[index] == table[index + 1]
index
exit
start
[1,2][4]
table
continue
continie
matrix.insert(0,1)
matrix
 matrix = table[index]
table
next
table[0]=1
index
 matrix = table[index]
index
exit
given_array
exit
continue
k
continue
k
next
k
next
root
k
continue
k
continue
root
node
k
continue
k
continue
k
continue
k
exit
continue
k
continue
tmp
next
k
next
root
k
next
root
next
val
k
continue
smaller
next
right_child
next
left_child
next
continue
next
exit
(0..2).reverse_each {|index| puts index}
(0..2).reverse_each do |indes|
(0..2).reverse_each
(0..2).each.reverse
2.times do |index|
(0..2).each {|index| puts index}
(2..0).each {|index| puts index}
(2..0).each do |index|
(2..0).each
2..0.each
